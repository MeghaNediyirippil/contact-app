


         CONTACT MANAGEMENT SYSTEM
    -------------------------------------

    1. Create new projevct contact-app  -  ng new contact-app
    2. Run the new project  -  ng serve --open
    3. Clear the code in app.component.html
    4. Install third party libraries - bootstrap,fontawesome, googlefont
            -> Install bootstrap
                ->bootstrap site -install commant-copy
                ->new terminal- cmd- past 
                ->npm i bootstrap

           

            ->Configure bootstrap
                in angular.js
                        "styles": [
                                "src/styles.css",
                                "node_modules/bootstrap/dist/css/bootstrap.min.css"
                                
                                ],
                        "scripts": [
                                "node_modules/bootstrap/dist/js/bootstrap.bundle.js"
                                ]
            ->index.html
                <!-- bootstrap -->
                    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM" crossorigin="anonymous">
                    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js" integrity="sha384-geWF76RCwLtnZ8qwWowPQNguL3RmwHVBC9FhGdlKrxdiJJigb/j/68SIy3Te4Bkz" crossorigin="anonymous"></script>
                <!-- fontawesome -->
                     npm install --save @fortawesome/fontawesome-free
                ->user google font
    5.create html page or Component
        ->Contact manager  -  view all contact - ng g c contactManager
        ->Add Contact - add new Contacts - ng g c addContact
        ->View Contact -View particular contact -ng g c viewContact
        ->Edit Contact - edit specific contact -ng g c editContact

    6.set up path for each component- Routing
                localhost:4200 ->localhost:4200/contactManager
            inside app-routing.modele.ts file

             {
                    //localhost:4200 ->localhost:4200/contactManager
                path:'',redirectTo:'contactManager',pathMatch:'full'
            },
                //Listing all conacts details
            {
                    path:'contactManager',component:ContactManagerComponent
            },

    7.<router-outlet></router-outlet>
         page to view requested component
    8.Design full page

    9.API INTEGRATION
            To fetch  data and display
                ->Create a new server folder
                ->Inside it, Create db.json file
                ->Goto jsonplaceholder - my json data - contact


                ->create a package.json file - npm init
                    update package.json as
                ->"start": "json-server --watch db.json --port 3000"

                ->Install npm i json-server

                ->Run backend - npm start

    10. Create Model
            - create model folder in src folder
            - Inside in it, create myContact.ts file and myGroup.ts
 
    11. Asynchronous Resolving

        js                    ts
       ----                  -----
        Promise            Observable(rxjs- reactive extension javascript (library))

        .then()           .subscribe()
        .catch()           .catch()


        Display all contact information API - get
        View all contact information API - get
        Update all contact information API - pur
        Delete all contact information API - delete

    12. Create Service
            SEVICES -   Pass data from one component to another component
                        if different components share the same  data then-
                        we use to create a service
            
            ng g s service-name  ->  ng g s services/api

    13.To Get http methods for api fetching
        -import HttpClientModule in app.module.ts

            import {HttpClientModule} from '@angular/common/http'
            import[
                HttpClientModule
            ]

    14.DEpendency Injection
            Data share between two dependent classes
            -It perform inside the constructor
            constructor -> Is a special member function
                        ->It execute first in the class

            Syntax for DI -> 
                                constructor(access-specifier variable-name : class-name){}

    15. ngOnInit
            ->It is a lifecycle book
            ->Starting stage of a component creation

    16. Data Binding - Data sharing inside a component (ts,html)

                1. One way data binding (ts->html or html to ts)
                    i)Component to view (ts->html)
                        1)String Interpolation -    
                                 {{variable-name}} (inside in html)
                        2)Property binding -
                                 [attribut-name]="property-name"

                    ii)View to component  (html to ts)
                         1) Event Binding -       
                                 (Event-name)="function-name()"

                            Events
                            ->HTML events are "things" that happen to HTML elements.
                            ->An HTML web page has finished loading
                            ->An HTML input field was changed
                            ->An HTML button was clicked

                        2) Event binding using $event
                                ->$event is used in function argument
                                ->(event-name)="function-name($event)"    -( used inhtml)
                                ->function-name(event)       -(used in ts)

                    iii)Two Way Data Binding
                            ->ngModel -  [(ngModel)]="property-name"
                                ngMOdel imports in app.module.ts - FormsModule
                                    *)create a FormControl instance from a domain model and binds it to a form control element.
                                    *)add this in to input tag also put name attribute in it




    17.Directives - To manipulate DOM
            1)Component Directives
            2)Structural Directives
                    *ngIf="condition"
                    *ngFor="let var-name of array-name"

    18.ActivatedRoute
        Provides access to information about a route associated with a component that is loaded in an outlet. Use to traverse 
        the RouterState tree and extract information from nodes.

        ->Parameters
            -params : An observable of the matrix parameters scoped to this route

    19.Transforming Data Using Pipes
       -> Pipes are simple functions to use in template expressions to accept an input value and return a transformed value.
       -> Angular provides built-in pipes for typical data transformations,
            (https://angular.io/guide/pipes)->(Refer this site)

            eg: DatePipe - Formats a date value according to locale rules.
                UpperCasePipe - Transforms text to all upper case.

        -> create a pipe -  ng g p pipes/filter

    20.Router (class)
            A service that provides navigation among views and URL manipulation capability
        -navigateByUrl()
            Navigates to a view using an absolute route path